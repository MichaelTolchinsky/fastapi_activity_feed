services:
  fastapi-app:
    build: .
    container_name: fastapi_activity_feed
    ports:
      - "8000:8000"
    env_file:
      - .env
    volumes:
      - .:/app
    depends_on:
      postgres:
        condition: service_started
      redis:
        condition: service_started
      kafka:
        condition: service_healthy
    environment:
      - POSTGRES_SERVER=${POSTGRES_SERVER}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}

  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:7
    container_name: redis
    restart: always
    ports:
      - "6379:6379"

  zookeeper:
    image: bitnami/zookeeper:3.9.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: bitnami/kafka:3.6.1
    container_name: kafka
    ports:
      - "${KAFKA_PORT}:${KAFKA_PORT}"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://${KAFKA_HOST}:${KAFKA_PORT}
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:${KAFKA_PORT}
      - ALLOW_PLAINTEXT_LISTENER=yes
    healthcheck:
      test: [ "CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "localhost:${KAFKA_PORT}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - zookeeper

  kafka-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kafka-worker
    env_file:
      - .env
    command: [ "python", "app/worker/consumer.py" ] # ðŸ‘ˆ run the worker instead of FastAPI
    depends_on:
      - kafka
      - redis
      - postgres

volumes:
  postgres_data:
